AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  todo-sam-app
  Build latest version

  Sample SAM Template for todo-sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Parameters:
  EnvType:
    Description: Stage/Environment name
    Type: String
  ComputeType:
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Default: BUILD_GENERAL1_MEDIUM
    Description: AWS CodeBuild project compute type.
    Type: String
  EnvironmentType:
    AllowedValues:
      - LINUX_CONTAINER
      - WINDOWS_CONTAINER
    Default: LINUX_CONTAINER
    Description: Environment type used by AWS CodeBuild. See the documentation for details (https://docs.aws.amazon.com/codebuild/latest/userguide/create-project.html#create-project-cli).
    Type: String
  GitHubOwner:
    Description: GitHub username owning the repo
    Type: String
    Default: "victor-quantiq"
  GitHubOAuthToken:
    Description: OAuth token used by AWS CodePipeline to connect to GitHub
    NoEcho: true
    Type: String
    # Default: "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"
    Default: "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"
  GitHubRepo:
    Description: GitHub repo name
    Type: String
    Default: "victor-quantiq/aws-sam-codepipeline.git"
  GitHubBranch:
    Description: GitHub repo branch name. It defaults to master if not specified.
    Type: String
    Default: dev
  BuildSpecFilePath:
    Description: >-
      Relative BuildSpec file path for build stage. For more information, see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
    Type: String
    Default: "buildspec.yaml"
  DeployStackName:
    Type: String
    Default: "todo-sam-codepipeline"
  DeployRoleName:
    Description: >-
      The IAM role name to deploy the CloudFormation stack. This role needs to be configured to allow
      cloudformation.amazonaws.com to assume it. Deploy stage will not be added if not specified.
    Type: String
    Default: "Victor"

Conditions:
  DevResource: !Equals
    - !Ref EnvType
    - "dev"
  UATResource: !Equals
    - !Ref EnvType
    - "UAT"
  ProdResource: !Equals
    - !Ref EnvType
    - "prod"
  DevOrUATResource:
    !Or [!Equals [!Ref EnvType, "dev"], !Equals [!Ref EnvType, "UAT"]]
  HasDeployStage: !Not [!Equals [!Ref DeployRoleName, ""]]

Globals:
  Function:
    Timeout: 3
    Runtime: nodejs14.x
    CodeUri: todos/
    Environment:
      Variables:
        # TODO_TABLE: todo
        TODO_TABLE: !Ref TodoSamTable #Ca pourrait Ãªtre un param

  HttpApi:
    CorsConfiguration:
      AllowOrigins:
        - "*"
      AllowHeaders:
        - "*"
      AllowMethods:
        - "*"
    Auth:
      Authorizers:
        OAuth2Authorizer:
          JwtConfiguration:
            issuer: "https://dev--cm-941t.us.auth0.com/"
            audience:
              - https://auth0-jwt-authorizer-sam-integration/
          IdentitySource: "$request.header.Authorization"
        cognitoOAuth2Authorizer:
          JwtConfiguration:
            issuer: "https://cognito-idp.eu-west-3.amazonaws.com/eu-west-3_ZTo0pAnII"
            audience:
              - 4967qgmj4q2g3srd7h5ot0u3dg
          IdentitySource: "$request.header.Authorization"
      DefaultAuthorizer: !Ref AWS::NoValue

Resources:
  Artifacts:
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
    Type: AWS::S3::Bucket

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref Artifacts
        Type: S3
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GithubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GitHubOwner
                OAuthToken: !Ref GitHubOAuthToken
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Deploy
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt PipelineRole.Arn
                StackName: !Ref DeployStackName
                TemplatePath: "BuildArtifact::packaged-template.yaml"
              RunOrder: 1
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Ref DeployStackName
              RunOrder: 2

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "Used by CodePipeline. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName:  root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref BuildSpecFilePath
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: !Ref ComputeType
        Image: "aws/codebuild/standard:4.0"
        Type: !Ref EnvironmentType

  BuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "Used in CodeBuild project. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Statement:
          - Action: 
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName:  root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  HttpApi:
    Type: AWS::Serverless::HttpApi

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Condition: DevOrUATResource
    Properties:
      # CodeUri: todos/true
      Handler: helloworld.lambdaHandler
      # Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Properties:
            Path: /hello
            Method: get
            # Auth:
            #   Authorizer: cognitoOAuth2Authorizer
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api

  HelloWorldFunction2:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      # CodeUri: todos/
      Handler: helloworld2.lambdaHandler
      # Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        HelloWorld2:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello2
            Method: get

  ListTodosFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      # CodeUri: todos/
      Handler: listTodos.handler
      # Runtime: nodejs14.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoSamTable
      Events:
        HelloWorld:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /todos
            Method: get

  GetTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      # CodeUri: todos/
      Handler: getTodo.handler
      # Runtime: nodejs
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoSamTable
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            Path: /todos/{id}
            Method: get

  UpdateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      # CodeUri: todos/
      Handler: updateTodo.handler
      # Runtime: nodejs
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoSamTable
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            Path: /todos/{id}
            Method: put

  CreateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      # CodeUri: todos/
      Handler: createTodo.handler
      # Runtime: nodejs
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoSamTable
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            Path: /todos
            Method: post

  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      # CodeUri: todos/
      Handler: deleteTodo.handler
      # Runtime: nodejs
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoSamTable
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            Path: /todos/{id}
            Method: delete

  TodoSamTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi2:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/hello2"
    # HelloWorldFunction:
    #   Description: "Hello World Lambda Function ARN"
    #   Value: !GetAtt HelloWorldFunction.Arn
    # HelloWorldFunctionIamRole:
    #   Description: "Implicit IAM Role created for Hello World function"
    #   Value: !GetAtt HelloWorldFunctionRole.Arn
